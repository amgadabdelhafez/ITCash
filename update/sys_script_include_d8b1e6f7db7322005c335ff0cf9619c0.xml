<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_83654_itcash.accounting</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>accounting</name>
        <script><![CDATA[var accounting = Class.create();
accounting.prototype = {
    initialize: function() {
    },
	
	//get the balance of a boc, so we pass the sys_id of a boc for now, later this should be refactored to pass addresses?
	
	getItcBalance: function(_boc) {
		var balances_gr = new GlideRecord('x_83654_itcash_balances');		
		return balances_gr.getElement(_boc).getValue('balance');
	},
	
	//here we move itc from one boc to another
	//we first call the getBalance to check if there is available itc to transfer in from's balance
	//then we create a tx in the ledger, we should return the tx ref from this fimction? 
	
	updateItcBalance: function(_from, _to, _amount, _note) {

		var fromOldBal, fromNewBal, toOldBal, toNewBal, descriptionNote;
		
		var boc_gr = new GlideRecord('x_83654_itcash_bag_of_cash');
		var balance_gr = new GlideRecord('x_83654_itcash_balances');
		
		fromOldBal = getItcBalance(_from);
		toOldBal = getItcBalance(_to);		
		if(fromOldBal < _amount){
			//sender doesn't have enoung balance to complete this transaction!
			return false;
		} else {
			//Now let's do the actual balance transfer
			balances_gr.getElement(_from).setValue('balance', fromOldBal - _amount);
			balances_gr.getElement(_to).setValue('balance', toOldBal + _amount);

			//now we need to check if the funds moved and balances are updated
			fromNewBal = getItcBalance(_from);
			toNewBal = getItcBalance(_to);
			//assert(fromNewBal, fromOldBal - _amount);
			//assert(toNewBal, toOldBal + _amount);
			//if something went wrong, we need to handlehere

			//then we should fire an event logging the transfer that happned
			 gs.eventQueue("x_83654_itcash.balance_moved", current);

			//and log the transaction in the ledger
			
		}

		balance_gr.addQuery('balance', fromAddress);
        balance_gr.query();
		while(boc_gr.next()){
			balance = boc_gr.balance;
		}
		
	},
	createLedgerTx: function(_from, _to, _amount, _note) {
		var ledger_gr = new GlideRecord('x_83654_itcash_ledger');
		ledger_gr.initialize();
		ledger_gr.from = _from;
		ledger_gr.to = _to;
		ledger_gr.amount = _amount;
		ledger_gr.description = _note;
		ledger_gr.insert();

		return balances_gr.getElement(_boc).getValue('balance');
	},

    type: 'accounting'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>fcsag01</sys_created_by>
        <sys_created_on>2016-12-27 00:01:21</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>d8b1e6f7db7322005c335ff0cf9619c0</sys_id>
        <sys_mod_count>7</sys_mod_count>
        <sys_name>accounting</sys_name>
        <sys_package display_value="ITCash" source="x_83654_itcash">c1f91bffdb2322005c335ff0cf961951</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="ITCash">c1f91bffdb2322005c335ff0cf961951</sys_scope>
        <sys_update_name>sys_script_include_d8b1e6f7db7322005c335ff0cf9619c0</sys_update_name>
        <sys_updated_by>fcsag01</sys_updated_by>
        <sys_updated_on>2016-12-29 22:01:40</sys_updated_on>
    </sys_script_include>
</record_update>
